name: Build, push, and deploy

on:
  push:
    paths-ignore:
      - '.nais/alerts.yaml'
      - '.github/workflows/alerts.yml'
      - '.nais/aiven-topics.yaml'
      - '.github/workflows/deploy-aiven-topics.yml'
      - '*.md'
  pull_request:
    paths-ignore:
      - '.nais/alerts.yaml'
      - '.github/workflows/alerts.yml'
      - '.nais/aiven-topics.yaml'
      - '.github/workflows/deploy-aiven-topics.yml'
      - '*.md'

#env:
#  IMAGE: ghcr.io/${{ github.repository }}/altinnkanal-2:${{ github.sha }}

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '11.x'
      - uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('altinnkanal/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Build and run tests
        run: ./gradlew clean build

  build:
    name: Build and push Docker container
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '11.x'
      - uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('altinnkanal/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Build JAR
        run: ./gradlew clean build shadowJar -x test
      - name: Build and push image and SBOM to OCI registry
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: alf
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}
#      - name: Build and publish Docker image
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          docker build . --pull --tag ${IMAGE}
#          echo "$GITHUB_TOKEN" | docker login ghcr.io --username "$GITHUB_REPOSITORY" --password-stdin
#          docker push ${IMAGE}

  deploy-dev:
    name: Deploy to NAIS dev
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v2
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: .nais/naiserator.yaml
          VARS: .nais/config-dev.yaml
          IMAGE: ${{ needs.build.outputs.image }}

  deploy-prod:
    name: Deploy to NAIS prod
    needs: deploy-dev
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v2
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: .nais/naiserator.yaml
          VARS: .nais/config-prod.yaml
          IMAGE: ${{ needs.build.outputs.image }}
