import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

buildscript {
    ext.kotlin_version = '1.3.41'

    ext.jetty_version = "9.4.18.v20190429"
    ext.cxf_version = '3.3.1'
    ext.caffeine_version = '2.6.2'
    ext.jackson_version = '2.9.8'
    ext.prometheus_version = '0.6.0'
    ext.konfig_version = '1.6.10.0'
    ext.ktor_version = '1.2.1'
    ext.jaxws_api_version = '2.3.1'
    ext.jaxws_tools_version = '2.3.1'
    ext.jaxb_api_version = '2.4.0-b180830.0359'
    ext.jaxb_runtime_version = '2.4.0-b180830.0438'
    ext.javax_activation_version = '1.2.0'
    ext.java_activation_version = '1.1.1'

    ext.kafka_version = '2.0.1'
    ext.confluent_version = '5.0.0'

    ext.kotlinlogging_version = '1.6.26'
    ext.logstash_encoder_version = '5.3'
    ext.logback_version = '1.2.3'

    // test dependencies
    ext.kafka_embedded_version = '2.1.0'
    ext.kluent_version = '1.52'
    ext.spek_version = '2.0.6'
    ext.mockito_kotlin_version = '2.0.0-RC2'
    ext.wiremock_version = '2.23.2'

    dependencies {
        classpath "javax.xml.bind:jaxb-api:$jaxb_api_version"
        classpath "org.glassfish.jaxb:jaxb-runtime:$jaxb_runtime_version"
        classpath "com.sun.activation:javax.activation:$javax_activation_version"
        classpath ("com.sun.xml.ws:jaxws-tools:$jaxws_tools_version") {
            exclude group: 'com.sun.xml.ws', module: 'policy'
        }
    }
}

plugins {
    id 'no.nils.wsdl2java' version '0.10'
    id 'org.jmailen.kotlinter' version '1.25.0'
    id 'com.github.ben-manes.versions' version '0.21.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

mainClassName = 'no.nav.altinnkanal.JettyBootstrapKt'

wsdl2java {
    wsdlDir = file("src/main/resources")
    wsdlsToGenerate = [
        ["$projectDir/src/main/resources/OnlineBatchReceiver.wsdl"]
    ]
}

compileKotlin.dependsOn wsdl2java

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}
shadowJar {
    classifier = ""
    transform(ServiceFileTransformer) {
        path = 'META-INF/cxf'
        include 'bus-extensions.txt'
    }
}

test {
    testLogging.events("passed", "skipped", "failed")
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven {
        name 'Confluent maven repo'
        url 'http://packages.confluent.io/maven/'
    }
    jcenter()
}

dependencies {
    implementation project(':altinnkanal-schemas'),
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version",
        "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
        "org.eclipse.jetty:jetty-server:$jetty_version",
        "org.eclipse.jetty:jetty-servlet:$jetty_version",
        "io.ktor:ktor-client-core:$ktor_version",
        "io.ktor:ktor-client-apache:$ktor_version",
        "org.apache.kafka:kafka-clients:$kafka_version",
        "org.apache.cxf:cxf-rt-frontend-jaxws:$cxf_version",
        "org.apache.cxf:cxf-rt-transports-http:$cxf_version",
        "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version",
        "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version",
        "io.prometheus:simpleclient_servlet:$prometheus_version",
        "io.prometheus:simpleclient_hotspot:$prometheus_version",
        "com.github.ben-manes.caffeine:caffeine:$caffeine_version",
        "com.natpryce:konfig:$konfig_version",
        "io.github.microutils:kotlin-logging:$kotlinlogging_version",
        "net.logstash.logback:logstash-logback-encoder:$logstash_encoder_version",
        "javax.xml.ws:jaxws-api:$jaxws_api_version",
        "javax.activation:activation:$java_activation_version"

    implementation ("com.sun.xml.ws:jaxws-tools:$jaxws_tools_version") {
        exclude group: 'com.sun.xml.ws', module: 'policy'
    }

    implementation ("io.confluent:kafka-avro-serializer:$confluent_version") {
        exclude group: 'org.slf4j'
        exclude group: 'log4j'
        exclude group: 'org.apache.kafka'
    }
    implementation ("org.apache.cxf:cxf-rt-ws-security:$cxf_version") {
        exclude group: 'org.opensaml'
    }

    runtimeOnly "ch.qos.logback:logback-classic:$logback_version"

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
    testImplementation ("org.spekframework.spek2:spek-dsl-jvm:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntime ("org.spekframework.spek2:spek-runner-junit5:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation "org.amshove.kluent:kluent:$kluent_version",
        "no.nav:kafka-embedded-env:$kafka_embedded_version"
    testCompile "com.github.tomakehurst:wiremock:$wiremock_version"
}
